{
    "contents" : "#' Retrieves the most recent value of the capital account\n#' @param Account string identifier of account\n#' @param n number of monte carlo simulations\n#' @param Replace boolean for sampling with or without replacement DEFAULT = TRUE\n#' @return a ggplot object of simulation bands\n#' @note \n#' Requires ggplot2 package\n#' @export\n#' @author Jasen Mackie, Brian G. Peterson\n#' @seealso \\code{\\link{ggplot}}\n\nmcsim <- function(Account, n = 100, Replace = TRUE){\n  \n    a <- getAccount(Account)\n    EndEq <- a$summary$End.Eq\n  \n    s1.dates <- index(a$summary)\n  \n\n    ret <- ROC(EndEq)\n    chart.CumReturns(ret)\n  \n    # Set up for Sample() and Replicate()\n    ret_sample <- replicate(n,sample(as.vector(ret[-1,]), replace=Replace)) #use ret[-1] so we exclude 1st NA value from ROC calc\n    ret_cum_sample <- apply(ret_sample, 2, function(x) cumsum(x))\n    ret_cum_samplexts <- xts(ret_cum_sample, s1.dates[-1]) #use s1.dates[-1] so that length of dates is identical to length of ret_sample\n  \n    # Build the 5% and 95% quantile datasets\n    # TODO add params for user defined quantiles\n    ret_5 <- apply(ret_cum_samplexts, 1, function(x) quantile(x, .05))\n    ret_5 <- as.xts(ret_5)\n  \n    ret_95 <- apply(ret_cum_samplexts, 1, function(x) quantile(x, .95))\n    ret_95 <- as.xts(ret_95)\n  \n    ret_25 <- apply(ret_cum_samplexts, 1, function(x) quantile(x, .25))\n    ret_25 <- as.xts(ret_25)\n  \n    ret_75 <- apply(ret_cum_samplexts, 1, function(x) quantile(x, .75))\n    ret_75 <- as.xts(ret_75)\n  \n    charts <- merge(ret_5, ret_95, ret_25, ret_75)\n  \n    # Draw the graph with a ribbon\n    h <- ggplot(charts, aes(x = index(charts))) +\n      geom_ribbon(aes(ymin = ret_25, ymax = ret_75, colour = \"50%\"), alpha = 0.3, fill = \"red3\") +\n      geom_ribbon(aes(ymin = ret_5, ymax = ret_95, colour = \"90%\"), alpha = 0.3, fill = \"cornflowerblue\") +\n      theme(axis.text.x = element_text(angle=0, hjust = 0),\n            axis.title = element_text(face = 'bold', size = 14),\n            title = element_text(face = 'bold', size = 16),\n            legend.position = 'bottom',\n            legend.title = element_blank(),\n            legend.text = element_text(size = 12),\n            legend.key.width = unit(2, 'cm'))\n    #h <- h + geom_line(aes(y = cumsum(ret[-1,])), colour = \"black\", linetype = 1) +\n    h <- h + #geom_line(aes(y = EndEq[-1,])), colour = \"black\", linetype = 1) +\n      # TODO need to figure out why geom_line returns aes(no 'y' error) \n      ylab(label=\"Cumulative Returns\") +\n      xlab(label=\"Time\") +\n      ggtitle(\"Returns Distribution\")\n    #h\n  \n    return(h)\n}",
    "created" : 1459618368871.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3455997391",
    "id" : "E52466C3",
    "lastKnownWriteTime" : 1459628002,
    "path" : "C:/Users/jasen/Personal/blotter/pkg/blotter/R/mcsim.R",
    "project_path" : "mcsim.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}